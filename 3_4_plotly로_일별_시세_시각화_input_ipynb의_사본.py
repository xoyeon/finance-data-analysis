# -*- coding: utf-8 -*-
"""3.4 plotly로 일별 시세 시각화-input.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BbRyYddYf3c8N7BaZeGeZfaamSpcA2o4

[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/corazzon/finance-data-analysis/blob/main/3.4%20plotly%EB%A1%9C%20%EC%9D%BC%EB%B3%84%20%EC%8B%9C%EC%84%B8%20%EC%8B%9C%EA%B0%81%ED%99%94-input.ipynb)

## Plotly 는?
* 파이썬의 대표적인 인터랙티브 시각화 도구
* [Plotly Python Graphing Library | Python | Plotly](https://plotly.com/python/)
* [Financial Charts | Python | Plotly](https://plotly.com/python/financial-charts/)
* [Time Series and Date Axes | Python | Plotly](https://plotly.com/python/time-series/)
* [OHLC Charts | Python | Plotly](https://plotly.com/python/ohlc-charts/)
* [Python API reference for plotly — 4.14.3 documentation](https://plotly.com/python-api-reference/)

###  Plotly Express: high-level interface for data visualization
* https://plotly.com/python-api-reference/plotly.express.html
* seaborn 과 비슷한 사용법
* 사용법이 plotly.graph_objects 에 비해 비교적 간단한 편 

#### 사용법

* **scatter([data_frame, x, y, color, symbol, …])**
* scatter_3d([data_frame, x, y, z, color, …])
* scatter_polar([data_frame, r, theta, color, …])
* scatter_ternary([data_frame, a, b, c, …])
* scatter_mapbox([data_frame, lat, lon, …])
* scatter_geo([data_frame, lat, lon, …])
* **line([data_frame, x, y, line_group, color, …])**
* line_3d([data_frame, x, y, z, color, …])
* line_polar([data_frame, r, theta, color, …])
* line_ternary([data_frame, a, b, c, color, …])
* line_mapbox([data_frame, lat, lon, color, …])
* line_geo([data_frame, lat, lon, locations, …])
* **area([data_frame, x, y, line_group, color, …])**
* **bar([data_frame, x, y, color, facet_row, …])**
* timeline([data_frame, x_start, x_end, y, …])
* bar_polar([data_frame, r, theta, color, …])
* **violin([data_frame, x, y, color, facet_row, …])**
* **box([data_frame, x, y, color, facet_row, …])**
* **strip([data_frame, x, y, color, facet_row, …])**
* **histogram([data_frame, x, y, color, …])**
* **pie([data_frame, names, values, color, …])**
* **treemap([data_frame, names, values, …])**
* **sunburst([data_frame, names, values, …])**
* funnel([data_frame, x, y, color, facet_row, …])
* funnel_area([data_frame, names, values, …])
* scatter_matrix([data_frame, dimensions, …])
* parallel_coordinates([data_frame, …])
* parallel_categories([data_frame, …])
* choropleth([data_frame, lat, lon, …])
* choropleth_mapbox([data_frame, geojson, …])
* density_contour([data_frame, x, y, z, …])
* density_heatmap([data_frame, x, y, z, …])
* density_mapbox([data_frame, lat, lon, z, …])
* imshow(img[, zmin, zmax, origin, labels, x, …])

### Graph Objects: low-level interface to figures, traces and layout
* https://plotly.com/python-api-reference/plotly.graph_objects.html
* 다양한 시각화

#### Figure
Figure([data, layout, frames, skip_invalid])

#### Layout
Layout([arg, activeshape, angularaxis, …])

#### Simple Traces
* Scatter([arg, cliponaxis, connectgaps, …])
* Scattergl([arg, connectgaps, customdata, …])
* Bar([arg, alignmentgroup, base, basesrc, …])
* Pie([arg, automargin, customdata, …])
* Heatmap([arg, autocolorscale, coloraxis, …])
* Heatmapgl([arg, autocolorscale, coloraxis, …])
* Image([arg, colormodel, customdata, …])
* Contour([arg, autocolorscale, autocontour, …])
* Table([arg, cells, columnorder, …])

#### Distribution Traces
* Box([arg, alignmentgroup, boxmean, …])
* Violin([arg, alignmentgroup, bandwidth, …])
* Histogram([arg, alignmentgroup, autobinx, …])
* Histogram2d([arg, autobinx, autobiny, …])
* Histogram2dContour([arg, autobinx, …])

#### Finance Traces
* Ohlc([arg, close, closesrc, customdata, …])
* Candlestick([arg, close, closesrc, …])
* Waterfall([arg, alignmentgroup, base, …])
* Funnel([arg, alignmentgroup, cliponaxis, …])
* Funnelarea([arg, aspectratio, baseratio, …])
* Indicator([arg, align, customdata, …])

#### 3D Traces –

* Scatter3d([arg, connectgaps, customdata, …])
* Surface([arg, autocolorscale, cauto, cmax, …])
* Mesh3d([arg, alphahull, autocolorscale, …])
* Cone([arg, anchor, autocolorscale, cauto, …])
* Streamtube([arg, autocolorscale, cauto, …])
* Volume([arg, autocolorscale, caps, cauto, …])
* Isosurface([arg, autocolorscale, caps, …])

#### Map Traces
* Scattergeo([arg, connectgaps, customdata, …])
* Choropleth([arg, autocolorscale, coloraxis, …])
* Scattermapbox([arg, below, connectgaps, …])
* Choroplethmapbox([arg, autocolorscale, …])
* Densitymapbox([arg, autocolorscale, below, …])

#### Specialized Traces
* Scatterpolar([arg, cliponaxis, connectgaps, …])
* Scatterpolargl([arg, connectgaps, …])
* Barpolar([arg, base, basesrc, customdata, …])
* Scatterternary([arg, a, asrc, b, bsrc, c, …])
* Sunburst([arg, branchvalues, count, …])
* Treemap([arg, branchvalues, count, …])
* Sankey([arg, arrangement, customdata, …])
* Splom([arg, customdata, customdatasrc, …])
* Parcats([arg, arrangement, bundlecolors, …])
* Parcoords([arg, customdata, customdatasrc, …])
* Carpet([arg, a, a0, aaxis, asrc, b, b0, …])
* Scattercarpet([arg, a, asrc, b, bsrc, …])
* Contourcarpet([arg, a, a0, asrc, atype, …])

### Pandas와 쉽게 호환되는 cufflinks
* [santosjorge/cufflinks: Productivity Tools for Plotly + Pandas](https://github.com/santosjorge/cufflinks)

## 필요한 라이브러리 로드
"""

# plotly 최신버전을 사용해 주세요. 최신버전이 아닐 때 동작하지 않을 수 있습니다.
!pip install plotly --upgrade

import plotly.express as px
import pandas as pd

"""## plotly 예제 따라하기
* [Time Series and Date Axes | Python | Plotly](https://plotly.com/python/time-series/)
"""

# px 에서 내장하고 있는 data.stocks 데이터를 불러옵니다.
df = px.data.stocks()

"""## 일별 수익률 선그래프 그리기"""

# px.line 으로 특정 종목("GOOG")에 대해 선그래프를 그립니다.
px.line(df, x="date", y="GOOG")

"""## 일별 수익률 막대그래프 그리기"""

# 일별 수익률에서 -1을 빼줍니다.
df_1 = df.set_index("date") - 1
df_1

# 수익률을 막대그래프로 그립니다.
px.bar(df, x=df_1.index, y="GOOG")

"""## facet_col을 사용한 서브플롯 그리기"""

# df_1.columns 의 name을 "company"로 지정하기
df_1.columns.name = "company"
df_1.columns

# px.area 로 수익률 분포를 그립니다.
# facet_col 을 통해 서브플롯을 그릴 수 있습니다.
px.area(df_1, facet_col="company", facet_col_wrap=2)

"""## 여러 종목을 하나의 그래프로 표현하기"""

# px.line 으로 전체 데이터의 수익률을 구합니다.
# hover_data={"date": "|%Y-%m-%d"} 로 시간을 표현할 수 있습니다.
fig = px.line(df, x="date", y=df.columns,
        hover_data={"date": "|%B %d, %Y"}, title="일별수익률")
fig.show()

"""##  Range Slider와 함께 시계열 그래프 그리기
* [Time Series and Date Axes | Python | Plotly](https://plotly.com/python/time-series/)
"""

fig = px.line(df, x="date", y="AAPL",
              hover_data={"date": "|%B %d, %Y"}, title="AAPL")
fig.update_xaxes(rangeslider_visible=True)

"""## Simple Candlestick with Pandas

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/92/Candlestick_chart_scheme_01-en.svg/1280px-Candlestick_chart_scheme_01-en.svg.png" width="300">

캔들스틱 차트(영어: Candlestick chart) 또는 봉차트, 일본식 캔들스틱 차트는 주식을 비롯한 유가증권과 파생상품, 환율의 가격 움직임을 보여주는 금융 차트이다. 각각의 "캔들스틱" 또는 "봉"은 일반적으로 "하루"의 가격 움직임을 나타내며, 따라서 20일간의 거래를 보여주는 차트에는 20개의 캔들스틱이 있다.

캔들스틱 차트는 기술 통계학에서 사용되는 상자 수염 그림과 외적으로 유사하지만, 상자 수염 그림은 캔들스틱과 달리 금융이 아닌 다른 정보들을 표시한다.

출처 : [캔들스틱 차트 - 위키백과, 우리 모두의 백과사전](https://ko.wikipedia.org/wiki/%EC%BA%94%EB%93%A4%EC%8A%A4%ED%8B%B1_%EC%B0%A8%ED%8A%B8)

<img src="https://i.imgur.com/8hS43K1.png">

* [Candlestick Charts | Python | Plotly](https://plotly.com/python/candlestick-charts/)
"""

# plotly.graph_objects 를 go라는 별칭으로 불러옵니다.
import plotly.graph_objects as go

# go.Candlestick 을 그립니다.
df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')

fig = go.Figure(data=[go.Candlestick(x=df['Date'],
                open=df['AAPL.Open'],
                high=df['AAPL.High'],
                low=df['AAPL.Low'],
                close=df['AAPL.Close'])])

fig.show()

"""## OHLC(Open-High-Low-Close)


<img src="https://i.imgur.com/7str78U.png">


* [OHLC Charts | Python | Plotly](https://plotly.com/python/ohlc-charts/)
"""

# go.Ohlc를 그립니다.
df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')

fig = go.Figure(data=go.Ohlc(x=df['Date'],
                    open=df['AAPL.Open'],
                    high=df['AAPL.High'],
                    low=df['AAPL.Low'],
                    close=df['AAPL.Close']))
fig.show()

"""## Candlestick without Rangeslider
* [candlestick Traces | Python | Plotly](https://plotly.com/python/reference/candlestick/)
"""

# Rangeslider를 제외하고 Candlestick을 그립니다.
fig = go.Figure(data=[go.Candlestick(x=df['Date'],
                open=df['AAPL.Open'],
                high=df['AAPL.High'],
                low=df['AAPL.Low'],
                close=df['AAPL.Close'])])

fig.update_layout(xaxis_rangeslider_visible=False)
fig.show()

"""## 직접 수집한 주가 데이터로 시각화 해보기"""

# FinanceDataReader 로드하기
!pip install finance-datareader
!pip install -U finance-datareader # 업데이트

import FinanceDataReader as fdr

# 특정 주가 불러오기
# FinanceDataReader의 DataReader는 미국 주식의 경우 종목코드대신 티커(Ticker)를 사용합니다.
# 티커는 약자와 비슷합니다.(마이크로소프트:MSFT, 스타벅스:SBUX 등)
amd = fdr.DataReader("AMD", "2015", "2021")
amd.shape

amd.head()

amd.tail()

"""### 선그래프 그리기"""

# px.line
px.line(amd, y="Close", title="AMD 일별 종가")

# 전일비에 대한 선 그래프를 그립니다.
px.line(amd, y="Change", title="AMD 전일비")

# 전일비에 대한 히스토그램을 그립니다.
# marginal="box" 옵션을 사용해 봅니다.
px.histogram(amd, x="Change", marginal="violin", title="AMD 전일비")

"""###  Range Slider와 함께 Candlestick 그리기
* [Time Series and Date Axes | Python | Plotly](https://plotly.com/python/time-series/)
"""

fig = go.Figure(data=[go.Candlestick(x=amd.index,
                open=amd['Open'],
                high=amd['High'],
                low=amd['Low'],
                close=amd['Close'])])
fig.show()

"""### OHLC(Open-High-Low-Close)"""

fig = go.Figure(data=[go.Ohlc(x=amd.index,
                open=amd['Open'],
                high=amd['High'],
                low=amd['Low'],
                close=amd['Close'])])
fig.show()

"""### 여러 종목의 수익률 보기"""

FAANG = ["FB", "AMZN", "AAPL", "NFLX", "GOOGL"]
FAANG

# faang_list 의 종가 가져오기
faang_list = [fdr.DataReader(code, '2019', '2021')['Close'] for code in FAANG]

# concat 으로 데이터 병합하기
df_faang = pd.concat(faang_list, axis=1)
df_faang.columns = FAANG

df_faang.shape

# 수집한 데이터 확인하기
df_faang.head()

df_faang.tail()

# 일별 수익률 구하기
df_ratio = df_faang / df_faang.iloc[0] - 1
df_ratio

# 서브플롯을 그리기 위해 columns.name 을 설정하기
df_ratio.columns.name = "company"
df_ratio.columns

"""### 선그래프 그리기"""

# px.line 으로 선 그래프 그리기
px.line(df_ratio, title="FAANG 일별 수익률")

"""### areaplot 그리기"""

# px.area 로 수익률 그래프 그리기
px.area(df_ratio, facet_col="company", facet_col_wrap=2)

"""### 막대그래프 그리기"""

px.bar(df_ratio, facet_col="company", facet_col_wrap=2)

px.bar(df_ratio, x=df_ratio.index, y="FB")

"""### scatterplot 그리기"""

px.scatter(df_ratio, x="GOOGL", y="AAPL",
           marginal_x="histogram", marginal_y="box")

"""### distribution 그리기"""

# px.box
px.box(df_ratio,points="all")

# px.violin
px.violin(df_ratio, points="all")

# px.strip
px.strip(df_ratio)

# px.histogram
px.histogram(df_ratio, facet_col="company", facet_col_wrap=2)

"""## Plotly 공식문서 더 보기

[Plotly Python Graphing Library | Python | Plotly](https://plotly.com/python/)
"""